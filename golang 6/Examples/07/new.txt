1) Database. Это просто что-то, что умеет последовательно читать любые данные. 
Хранит закодированную длинут + какой-то блок. Вообще не знает, что в этом блоке хранится.

2) Repository. Представляет собой прослойку между пользователем и этой db, 
предоставляя абстракцию строчки в виде map[column:string]value:string с именем Row. 
Умеет читать и писать, используя RowReader, RowWriter, которые должен определять польователь

3) Codec (он же EncoderDecoder) это штука, которая подходит для гошного encoding/ для того, чтобы 
кодировать Row в что-то, что кладется в базу. можно настраиваться. сейчас я добавил только JSON

4) пользовательская часть с определением кастомной структуры и RowReader/Writer для нее


Jaroslavs Samčuks, [3/8/2022 8:16 PM]
> 2) Repository. Представляет собой прослойку между пользователем и этой db, 
предоставляя абстракцию строчки в виде map[column:string]value:string с именем Row. 
Умеет читать и писать, используя RowReader, RowWriter, которые должен определять польователь

нужно переформулировать. я бы сказал как-то более обтекаемо:
Предоставляет абстракцию для операции со строками данных (добавления, поиск, модификация и т.д.), 
позволяя менять базу данных незаметно для конечного пользователя библиотеки.
Неоходимые операции - кодирование и декодирование (аналогично маршаллерам из https://pkg.go.dev/encoding)
type Row interface {
  Encode(column string, data interface{})
  Decode(column string, data interface{})
}
Простейшая реализация на мапах (без запаривания с интерфейсами) map[column:string]value:interface{} или map[column:string]value:string, чтобы не возиться с выборами типов - тупо всегда строки.

Jaroslavs Samčuks, [3/8/2022 8:18 PM]
А codec это что-то, что приводит строчку в вид, который будет храниться в физической дазе банных
