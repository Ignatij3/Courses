// mocking function
func printSize(n int) {
	if n < 10 {
		fmt.Println("SMALL")
	} else {
		fmt.Println("LARGE")
	}
}

// wrap it into the variable
var show = func(v ...interface{}) {
	fmt.Println(v...)
}

//substitue func fmt.Println with var show
func printSize(n int) {
	if n < 10 {
		show("SMALL")
	} else {
		show("LARGE")
	}
}

//test function
func TestPrintSize(t *testing.T) {
	var got string
	oldShow := show
	show = func(v ...interface{}) {
		if len(v) != 1 {
			t.Fatalf("expected show to be called with 1 parameter, got %d parameters", len(v))
		}
		var ok bool
		got, ok = v[0].(string)
		if !ok {
			t.Fatal("expected show to be called with a string")
		}
	}

	for _, tt := range []struct{
		N int
		Out string
	}{
		{2, "SMALL"},
		{3, "SMALL"},
		{9, "SMALL"},
		{10, "LARGE"},
		{11, "LARGE"},
		{100, "LARGE"},
	} {
		got = ""
		printSize(tt.N)
		if got != tt.Out {
			t.Fatalf("on %d, expected '%s', got '%s'\n", tt.N, tt.Out, got)
		}
	}

// restore show !!!
	show = oldShow
}
